/// Use
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use '../settings/variables' as var;
/// Funtions
///
@function rem($value, $context: var.$base-unit) {
    // Check $value not unit
    @if math.is-unitless($value) {
        $value: $value * 1px;
    }
    // Check $context not unit
    @if math.is-unitless($context) {
        $context: $context * 1px;
    }
    // @return $pixels / $context * 1rem;
    @return math.div($value, $context) * 1rem;
    // Error
    @error "Pixels: `#{$value}`.";
}

@function find($value, $prefix, $find: '') {
    $media: string.index($value, $prefix);
    @if ($media) {
        @if ($find== 'start') {
            @return string.slice($value, 0, $media - 1);
        }
        @if ($find== 'end') {
            @return string.slice($value, $media + 1, string.length($value));
        }
        @error "#{$find} is not a valid. Expected start or end !!";
    }
    // @error "#{$value} is not a valid. Please check again";
    @return false;
}

@function isset($array, $value) {
    @if (meta.type-of($array) == list) {
        @if not list.index($array, $value) {
            @error "#{$value} is not a valid side of list. Expected one of exactly attribute.";
        }
    }
    @if (meta.type-of($array) == map) {
        @if not map.get($array, $value) {
            @error "#{$value} is not a valid side of map. Expected one of exactly attribute.";
        }
    }
    @return true;
}

@function str-replace($string, $search, $replace: '') {
    /// Replace `$search` with `$replace` in `$string`
    /// @author Kitty Giraudel
    /// @param {String} $string - Initial string
    /// @param {String} $search - Substring to replace
    /// @param {String} $replace ('') - New value
    /// @return {String} - Updated string
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
    }

    @return $string;
}
