/// Use
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use '../settings/variables' as var;
/// Funtions
///
@function rem($value, $context: var.$base-unit) {
    // Check $value not unit
    @if math.is-unitless($value) {
        $value: $value * 1px;
    }
    // Check $context not unit
    @if math.is-unitless($context) {
        $context: $context * 1px;
    }
    // @return $pixels / $context * 1rem;
    @return math.div($value, $context) * 1rem;
    // Error
    @error "Pixels: `#{$value}`.";
}
@function find($value, $prefix, $find) {
    $media: string.index($value, $prefix);
    @if ($media) {
        @if ($find == start) {
            @return string.slice($value, 0, $media - 1);
        }
        @if ($find == end) {
            @return string.slice($value, $media + 1, string.length($value));
        }
        @error "#{$find} is not a valid. Expected start or end.";
    }
    @error "#{$value} is not a valid. Try again later";
}
@function breakpoints-isset($value, $prefix) {
    $media: string.index($value, $prefix);
    @if ($media) {
        $media-key: string.slice($value, 0, $media - 1);
        $checked: map.has-key(var.$breakpoints, $media-key);
        @if ($checked != true) {
            @error "#{$media-key} is not a valid. Expected one of exactly breakpoints key.";
        }
        @return $checked;
    }
    @return false;
}
@function isset($value, $array) {
    @if (meta.type-of($array) ==list) {
        @if not list.index($array, $value) {
            @error "#{$value} is not a valid side of list. Expected one of exactly attribute.";
        }
    }
    @if (meta.type-of($array) ==map) {
        @if not map.get($array, $value) {
            @error "#{$value} is not a valid side of map. Expected one of exactly attribute.";
        }
    }
    @return true;
}
