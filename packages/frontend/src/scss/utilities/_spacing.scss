/// Load
@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use '../settings' as setting;
@use '../mixins' as mixin;
/// @mixin
@mixin spacer-param($prefix, $values) {
    @if not $prefix {
        @error "prefix is incorrect syntax, Please check again!";
    }
    @if $values {
        /// Set class-name
        /// margin - padding
        $class-name: '';
        @each $keys, $values in setting.$property-spacers {
            @if $values == $prefix {
                $class-name: $keys;
            }
        }
        /// Check sides and spacer of values
        $side: setting.find($values, setting.$dash, $find: 'start');
        $spacer: setting.find($values, setting.$dash, $find: 'end');
        /// Check media
        /// md: -- lg: -- xl:
        $breakpoint-key: mixin.breakpoint-isset($values, setting.$colon);
        @if $breakpoint-key {
            $start-at: setting.find($values, setting.$colon, $find: 'start');
            $end-at: setting.find($values, setting.$colon, $find: 'end');
            // @error $side;
            $side-end: setting.find($side, setting.$colon, $find: 'end');
            $infix: mixin.breakpoint-infix($start-at, setting.$breakpoints);
            @if setting.isset($spacer, setting.$spacers) {
                @include mixin.media-breakpoint-down($start-at) {
                    @if type-of(map.get(setting.$sides, $side-end)) == list {
                        .#{$infix}#{$prefix}#{$end-at} {
                            @each $position in map.get(setting.$sides, $side-end) {
                                #{$class-name}-#{$position}: map.get(setting.$spacers, $spacer);
                            }
                        }
                    } @else {
                        .#{$infix}#{$prefix}#{$end-at} {
                            #{$class-name}-#{map.get(setting.$sides, $side-end)}: map.get(
                                setting.$spacers,
                                $spacer
                            );
                        }
                    }
                }
            }
        } @else {
            @if not string.index($values, setting.$dash) {
                /// Check values non "-"
                .#{$prefix}-#{$values} {
                    #{$class-name}: map.get(setting.$spacers, $values);
                }
            } @else {
                // @if setting.negative-margins($spacer, setting.$spacers) {
                // 	@if type-of(map.get(setting.$sides, $side)) == list {
                // 		/// Check side: x || y
                //         .#{$prefix}#{$values} {
                // 			@each $position in map.get(setting.$sides, $side) {
                // 				#{$class-name}-#{$position}: map.get(setting.$spacers, $spacer);
                //             }
                //         }
                //     } @else {
                // 		.#{$prefix}#{$values} {
                //             #{$class-name}-#{map.get(setting.$sides, $side)}: map.get(
                //                 setting.$spacers,
                //                 $spacer
                //             );
                //         }
                //     }
                // }
                $infix: mixin.spacer-infix($values, setting.$spacers);
                @if map.has-key(setting.$spacers, $spacer) {
                    /// Check key $spacers
                    @if type-of(map.get(setting.$sides, $side)) == list {
                        /// Check side: x || y
                        .#{$prefix}#{$values} {
                            @each $position in map.get(setting.$sides, $side) {
                                #{$class-name}-#{$position}: map.get(setting.$spacers, $spacer);
                            }
                        }
                    } @else {
                        .#{$prefix}#{$values} {
                            #{$class-name}-#{map.get(setting.$sides, $side)}: map.get(
                                setting.$spacers,
                                $spacer
                            );
                        }
                    }
                } @else {
                    /// Check negative-margins
                    @if $class-name == 'margin' {
                        @if type-of(map.get(setting.$sides, $side)) == list {
                            /// Check side: x || y
                            .#{$prefix}#{$infix} {
                                @each $position in map.get(setting.$sides, $side) {
                                    #{$class-name}-#{$position}: map.get(
                                        mixin.negative-margins($spacer, setting.$spacers),
                                        $spacer
                                    );
                                }
                            }
                        } @else {
                            .#{$prefix}#{$infix} {
                                #{$class-name}-#{map.get(setting.$sides, $side)}: map.get(
                                    mixin.negative-margins($spacer, setting.$spacers),
                                    $spacer
                                );
                            }
                        }
                    } @else {
                        @error "Negative only use for margin. Please remove your map !!";
                    }
                }
            }
        }
    }
}

@mixin spacer($prefix, $values) {
    @each $values in $values {
        @include spacer-param($prefix, $values);
    }
}
