/// Load
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use '../settings' as setting;
@use '../mixins' as mixin;
/// @mixin
@mixin spacer-handle($property, $class, $value) {
    @if $value {
        /// Get list property
        $value-list: map.get(setting.$spacings, 'values');
        $side-list: map.get(setting.$spacings, 'sides');

        /// Check sides and space of value based on "-"
        $side: setting.find($value, setting.$dash, $find: 'start');
        $space: setting.find($value, setting.$dash, $find: 'end');

        /// Check media
        /// md: -- lg: -- xl:
        $breakpoint-key: mixin.breakpoint-isset($value, setting.$colon);
        @if $breakpoint-key {
            $start-at: setting.find($value, setting.$colon, $find: 'start');
            $end-at: setting.find($value, setting.$colon, $find: 'end');
            $side-end: setting.find($side, setting.$colon, $find: 'end');
            @error $side, $side-end;
            $infix: mixin.breakpoint-infix($start-at, setting.$breakpoints);
            /// Check infix when value is 0.25 - 0.5 ...
            $spacing-infix: mixin.spacing-infix($value-list, $end-at);
            @if map.has-key($value-list, $space) {
                @include mixin.media-breakpoint-down($start-at) {
                    @if type-of(map.get($side-list, $side-end)) == list {
                        /// Check side has x || y
                        .#{$infix}#{$class}#{$spacing-infix} {
                            @each $position in map.get($side-list, $side-end) {
                                #{$property}-#{$position}: map.get($value-list, $space);
                            }
                        }
                    } @else {
                        .#{$infix}#{$class}#{$spacing-infix} {
                            #{$property}-#{map.get($side-list, $side-end)}: map.get(
                                $value-list,
                                $space
                            );
                        }
                    }
                }
            } @else {
                @include mixin.media-breakpoint-down($start-at) {
                    /// Check negative-margins
                    /// Has n in property
                    @include mixin.negative-margins(
                        $property,
                        $class,
                        $end-at,
                        $side-end,
                        $space,
                        $infix
                    );
                }
            }
        } @else {
            @if not string.index($value, setting.$dash) {
                /// Check value non "-"
                .#{$class}-#{$value} {
                    #{$property}: map.get($value-list, $value);
                }
            } @else {
                @if map.has-key($value-list, $space) {
                    /// Check infix when value is 0.25 - 0.5 ...
                    $spacing-infix: mixin.spacing-infix($value-list, $value);
                    /// Check spacings-sides has key side
                    @if type-of(map.get($side-list, $side)) == list {
                        /// Check side has x || y
                        .#{$class}#{$spacing-infix} {
                            @each $position in map.get($side-list, $side) {
                                #{$property}-#{$position}: map.get($value-list, $space);
                            }
                        }
                    } @else {
                        .#{$class}#{$spacing-infix} {
                            #{$property}-#{map.get($side-list, $side)}: map.get(
                                $value-list,
                                $space
                            );
                        }
                    }
                } @else {
                    /// Check negative-margins
                    /// Has n in property
                    @include mixin.negative-margins($property, $class, $value, $side, $space);
                }
            }
        }
    }
}

@mixin spacer($property, $class, $values) {
    @each $value in $values {
        @include spacer-handle($property, $class, $value);
    }
}
