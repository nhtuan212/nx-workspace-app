/// Load
@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use '../settings' as sets;
@use '../mixins' as mixin;
/// @mixin
@mixin flex-param($values, $class-name, $char: ':') {
    @if $values {
        /// Set attribute map follow $class-name
        $attribute-map: sets.$justify-content;
        @if ($class-name== 'align-items') {
            $attribute-map: sets.$align-items;
        }

        /// Check media
        /// md: -- lg: -- xl:
        $breakpoint-key: sets.breakpoints-isset($values, $char);
        @if $breakpoint-key {
            $start-at: sets.find($values, $char, $find: 'start');
            $end-at: sets.find($values, $char, $find: 'end');
            $infix: mixin.breakpoint-infix($start-at, sets.$breakpoints);
            @if sets.isset($end-at, $attribute-map) {
                @include mixin.media-breakpoint-down($start-at) {
                    .#{$infix} {
                        &#{$class-name}-#{$end-at} {
                            #{$class-name}: #{$end-at};
                        }
                    }
                }
            }
        } @else {
            @if sets.isset($values, $attribute-map) {
                .#{$class-name} {
                    &-#{$values} {
                        #{$class-name}: map.get($attribute-map, $values);
                    }
                }
            }
        }
    }
}

@mixin flex-justify($values) {
    @if meta.type-of($values) ==map or meta.type-of($values) ==list {
        @each $values in $values {
            @include flex-param($values, $class-name: 'justify-content');
        }
    } @else {
        @include flex-param($values, $class-name: 'justify-content');
    }
}

@mixin flex-align($values) {
    @if meta.type-of($values) ==map or meta.type-of($values) ==list {
        @each $values in $values {
            @include flex-param($values, $class-name: 'align-items');
        }
    } @else {
        @include flex-param($values, $class-name: 'align-items');
    }
}
