/// Load
@use 'sass:string';
@use 'sass:map';
@use '../settings' as setting;
@use '../mixins' as mixin;
/// @mixin
@mixin property-param($maps, $property, $class, $value) {
    @if $value {
        /// Check breakpoint isset value
        /// md: -- lg: -- xl:
        $has-breakpoint: mixin.breakpoint-isset($value, setting.$colon);

        /// Check key and property when has-breakpoint
        $breakpoint-key: setting.find($value, setting.$colon, $find: 'start'); // value before ':'
        $breakpoint-property: setting.find($value, setting.$colon, $find: 'end'); // value after ':'

        $value: if($has-breakpoint, $breakpoint-property, $value);
        $infix: if(
            $has-breakpoint,
            mixin.breakpoint-infix($breakpoint-key, setting.$breakpoints),
            ''
        );
        $result: if(type-of($maps) != map, $value, map.get($maps, $value));

        @if $property == 'margin' or $property == 'padding' {
            /// Check margin or padding
            @include mixin.media-breakpoint-down($breakpoint-key) {
                $sides: map.get(setting.$spacings, 'sides');
                $spacing-infix: mixin.spacing-infix($maps, $value);
                $side: setting.find($value, setting.$dash, $find: 'start');
                $space: setting.find($value, setting.$dash, $find: 'end');

                @if not string.index($value, setting.$dash) {
                    /// Check value non "-"
                    .#{$class}-#{$spacing-infix} {
                        #{$property}: map.get($maps, $value);
                    }
                } @else {
                    @if map.has-key($maps, $space) {
                        .#{$infix}#{$class}#{$spacing-infix} {
                            @each $position in map.get($sides, $side) {
                                #{$property}-#{$position}: map.get($maps, $space);
                            }
                        }
                    } @else {
                        /// Check negative-margins
                        /// Has n in property
                        @include mixin.negative-margins($property, $class, $value, $side, $space);
                    }
                }
            }
        } @else {
            @if setting.isset($maps, $value) {
                @include mixin.media-breakpoint-up($breakpoint-key) {
                    // Check if $class == '' => return value none "-"
                    $class-value: if($class != '' and $value != '', #{setting.$dash}, '') + $value;

                    .#{$infix}#{$class}#{$class-value} {
                        // Check property to return mixin scss
                        @if $property == 'grid' {
                            @include mixin.make-col(
                                map.get($maps, $value),
                                $columns: setting.$grid-columns
                            );
                        } @else if $property == 'border-radius' {
                            @if $class == 'rounded-top' {
                                @include mixin.border-top-radius($result);
                            } @else if $class == 'rounded-bottom' {
                                @include mixin.border-bottom-radius($result);
                            } @else if $class == 'rounded-left' {
                                @include mixin.border-left-radius($result);
                            } @else if $class == 'rounded-right' {
                                @include mixin.border-right-radius($result);
                            } @else {
                                @include mixin.border-radius($result);
                            }
                        } @else if $property == 'image-hover' {
                            @include mixin.image-hover($value);
                        } @else if $property == 'animation' {
                            @include mixin.animation($value);
                        } @else if $property == 'seo' {
                            @include mixin.seo($value);
                        } @else {
                            #{$property}: #{$result};
                            @if $property == 'word-wrap' {
                                word-break: #{$result};
                            }
                        }
                    }
                }
            }
        }
    }
}
