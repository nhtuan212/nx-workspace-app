/// Load
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use './../settings' as sets;
/// Variables
$breakpoint-map: sets.$breakpoints;
/// Mixins
/// Breakpoint-max function
/// Maximum breakpoint width. Null for the smallest (first) breakpoint.
/// @param {String} $name - Breakpoint name.
/// @param {Map} $breakpoints - Breakpoint name list.
/// @return {String} - Return breakpoint size.
///   >> breakpoint-max(sm, (xs: 0, sm: 576, md: 768, lg: 992, xl: 1200, 2xl: 1400, 3xl: 1536, 4xl: 1920))
///   576
///
@function breakpoint-max($name, $breakpoints: $breakpoint-map) {
    // Set value for $br-max (breakpoint max).
    $br-max: map.get($breakpoints, $name);
    // @debug "breakpoint-max: #{$br-max}";
    // Returned
    @return if($br-max !=0, $br-max, null);
}

/// ANCHOR 3.4 breakpoint-infix function
/// @param {String} $name - Breakpoint name.
/// @param {Map} $breakpoints - Breakpoint name list.
/// @return {String} - Return breakpoint size.
///
/// Returns a blank string if smallest breakpoint, otherwise returns the name
/// with a dash in front. Useful for making responsive utilities.
///
///    >> breakpoint-infix(xs, (xs: 0, sm: 576, md: 768, lg: 992, xl: 1200, 2xl: 1400,
///       3xl: 1536, 4xl: 1920))
///    "" (Returns a blank string)
///    >> breakpoint-infix(sm, (xs: 0, sm: 576, md: 768, lg: 992, xl: 1200, 2xl: 1400,
///       3xl: 1536, 4xl: 1920))
///    "-sm"
///
@function breakpoint-infix($name, $breakpoints: $breakpoint-map) {
    // Check if $name value exists in map checks the value $name if not exists in the map
    // return null, otherwise returns -#{$name}
    $infix: if(breakpoint-max($name, $breakpoints) ==null, '', $name + sets.$state + sets.$colon);
    // Log debug $infix
    // @debug "breakpoint-infix #{$infix}";
    // Returned
    @return $infix;
}

/// ANCHOR 4. All Breakpoint Mixin
/// Minimum breakpoint width. Null for the smallest (first) breakpoint.
///
/// ANCHOR 4.1 media-breakpoint-up
/// @param {String} $name - Breakpoint name.
/// @param {Map} $breakpoints - Breakpoint name list.
/// @return {String} - Return @content.
///
/// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
/// Makes the @content apply to the given breakpoint and wider.
/// Used: @include media-breakpoint-up($name) {@content}
/// after successful compilation
/// Case 1: @content;
/// Case 2:
///    @media (min-width: [breakpoint-value]) {
///      @content;
///    }
///
@mixin media-breakpoint-down($name, $breakpoints: $breakpoint-map) {
    // Get breakpoint name.
    $max: breakpoint-max($name);
    // Debug
    // @debug "media breakpoint down #{$max}";
    // Check $max
    @if $max {
        @media (max-width: #{sets.rem($max)}) {
            @content;
        }
    } @else {
        @content;
    }
}

@function breakpoint-isset($value, $prefix) {
    $media: string.index($value, $prefix);
    @if ($media) {
        $media-key: string.slice($value, 0, $media - 1);
        $checked: map.has-key(sets.$breakpoints, $media-key);
        @if not $checked {
            @error "#{$media-key} is not a valid. Expected one of exactly breakpoints key.";
        }
    }
    @return $media;
}
