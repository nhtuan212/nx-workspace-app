/// Load
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use './../settings' as setting;
/// Function
@function negative-merge($value, $array) {
    @if (meta.type-of($array) ==map) {
        @if not map.get($array, $value) {
            $new-value: string.slice($value, 2);
            @if not map.has-key($array, $new-value) {
                @error '#{$value} Values of negative-margins not exists in spacer variable';
            }
            $negative: (
                $value: map.get($array, $new-value) * -1,
            );
            @return map.merge($array, $negative);
        }
    }
    @return true;
}
@function spacing-infix($map, $key) {
    /// Check if properties has n
    $value-none-dash: string.slice($key, if(string.index($key, 'n'), 4, 3));
    $value: if(string.index($key, setting.$dash), $value-none-dash, 1);
    $new-value: setting.str-replace($key, setting.$dot, setting.$state + setting.$dot);
    $infix: if(map.has-key($map, $value), $new-value, '');
    // Log debug $infix
    @return $infix;
}
/// Mixin
@mixin negative-margins($property, $class, $value, $side, $spacer, $infix: '') {
    @if $property != 'margin' {
        @error "Negative only use for margin. Please remove invalid key in your map !!";
    }
    $value-list: map.get(setting.$spacings, 'values');
    $side-list: map.get(setting.$spacings, 'sides');
    $spacing-infix: spacing-infix($value-list, $value);
    @if type-of(map.get($side-list, $side)) == list {
        /// Check variable sides: x || y
        .#{$infix}#{$class}#{$spacing-infix} {
            @each $position in map.get($side-list, $side) {
                #{$property}-#{$position}: map.get(negative-merge($spacer, $value-list), $spacer);
            }
        }
    } @else {
        .#{$infix}#{$class}#{$spacing-infix} {
            #{$property}-#{map.get($side-list, $side)}: map.get(
                negative-merge($spacer, $value-list),
                $spacer
            );
        }
    }
}
